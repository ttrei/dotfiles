[user]
    name = Reinis Taukulis
    email = reinis.taukulis@gmail.com
[core]
    editor = /usr/bin/env nvim
    whitespace = cr-at-eol
    excludesfile = ~/.gitignore
[init]
    defaultBranch = master
[pull]
    rebase = true
[merge]
    conflictstyle = diff3
[rerere]
    enabled = true
[push]
    default = upstream
[diff]
    noprefix = true

[blame]
    ## Sadly, git blame fails if the revs file is not present
    ## https://stackoverflow.com/questions/70435937/git-blame-with-optional-ignorerevsfile
    # ignoreRevsFile = .git-blame-ignore-revs

[pager]
    # diff = delta
    # log = delta
    # reflog = delta
    # show = delta

# [interactive]
#     diffFilter = delta --color-only --features=interactive

[delta]
    features = decorations
    syntax-theme = gruvbox-light
    line-numbers = true
    max-line-length = 500

[delta "interactive"]
    keep-plus-minus-markers = false

[delta "decorations"]
    commit-style = raw
    file-style = blue auto bold
    file-decoration-style = none
    hunk-header-style = raw
    hunk-header-decoration-style = none


[alias]
    # list aliases
    alias = "!git config --get-regexp ^alias\\. | sort | sed -e 's/^alias\\.//' -e 's/\\ /\\ =\\ /' | grep -v ^'alias '"

    # Show root dir of git repo
    root = rev-parse --show-toplevel
    # Show root dir of the parent. Returns nothing if this repo is not a submodule.
    rootsuper = rev-parse --show-superproject-working-tree

    # show a commit in difftool (see http://stackoverflow.com/a/27963038)
    showtool = "!showci () { rev=${1:-HEAD}; git difftool -d $rev~1 $rev; }; showci $1"

    # pretty log
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%cd%Cblue %an%Creset' --abbrev-commit --date=format:%Y-%m-%d
    # don't show merges
    lgm = lg --first-parent -i --grep=merge --invert-grep

    # choose a commit on which to rebase
    rebase-fzf-commit = "!f() { git rebase -i $(git log --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%cd%Cblue %an%Creset' --color=always | fzf --ansi --reverse --height=40% | cut -d ' ' -f1)^ ; }; f"
    # choose a branch on which to rebase
    rebase-fzf-branch = "!f() { git rebase -i $(git for-each-ref --format='%(refname)' refs/ | fzf --ansi --reverse --height=40%) ; }; f"

    # # (From https://blog.jez.io/cli-code-review/)
    # # list changes since REVIEW_BASE (defaults to 'master' in my bashrc)
    # files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
    # stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    # # Open files changed since REVIEW_BASE in Vim tabs
    # review = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" $(git files | fzf -m)
    # reviewall = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" $(git files)
    # reviewdiff = !REVIEW_BASE=HEAD git review
    # reviewdiffall = !REVIEW_BASE=HEAD git reviewall

[includeIf "hasconfig:remote.*.url:**/*github.com*/**"]
    path = ~/.config/git/config-home

[includeIf "hasconfig:remote.*.url:**/*git.sr.ht*/**"]
    path = ~/.config/git/config-home

[includeIf "hasconfig:remote.*.url:**/*taukulis.lv*/**"]
    path = ~/.config/git/config-home

[includeIf "hasconfig:remote.*.url:**/*cvs.konts.lv*/**"]
    path = ~/.config/git/config-work
