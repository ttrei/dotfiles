* Try out Determinate Nix

   https://docs.determinate.systems/guides/advanced-installation/#nixos

* Annoyances

** (terminal) Garbage characters after taking command from atuin history

   Registered a bug against atuin:
   https://github.com/atuinsh/atuin/issues/2789
   And ghostty:
   https://github.com/ghostty-org/ghostty/discussions/7639

   Other problems with atuin in ghostty:
   https://github.com/ghostty-org/ghostty/discussions/6860

   The problem is probably related to the interactive history search.
   This leads to garbage characters:
   ctrl-r -> esc -> ls

   With enter_accept=true there are no garbage characters on command execution.
   But they appear afterwards, after executing a manually-entered command.

   Find how to print all commands sent to ghostty.
   Probably need to compile ghostty debug build?
   Need a refresher on terminal emulator <-> shell <-> application communication.

   Got atuin running in the vm from ghostty repo.
   Reproduced the issue.
   Run ghostty (debug build) from a terminal to record the communication with shell:
   @code
   ghostty 2>&1 | tee ghostty.log
   @end

   Built ghostty on my nixos ("zig build" just worked).

   Debug output while reproducing the bug (ctrl-r -> esc -> ls).
   @code
   # ctrl-r
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 18, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }

   debug(app): mailbox message=surface_message
   debug(surface): changing title "ls"

   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }

   # suspicious
   debug(io_handler): pushing kitty keyboard mode: terminal.kitty.key.Flags{ .disambiguate = true, .report_events = false, .report_alternates = true, .report_all = true, .report_associated = false }

   debug(app): mailbox message=surface_message
   debug(surface): changing mouse shape: terminal.mouse_shape.MouseShape.default

   # what's the meaning of this escape code?
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 27, 91, 54, 59, 49, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, .len = 6 } }

   info(grid): reallocating GPU buffer old=817 new=1087
   debug(gtk_x11): X11: found extra XkbStateNotify event w/lookup_mods: 0

   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }

   # esc
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 27, 91, 50, 55, 117, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 5 } }

   debug(app): mailbox message=surface_message
   debug(surface): changing mouse shape: terminal.mouse_shape.MouseShape.text

   debug(io_handler): popping kitty keyboard mode n=1

   # ls + ret
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 108, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 115, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 13, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }

   # suspicious
   debug(terminal): c=35A grapheme attach to left=1 primary_cp=20
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   warning(stream): invalid C0 character, ignoring: 0x6

   # maybe irrelevant - happens on each enter keypress, even when not using atuin
   warning(stream): unimplemented OSC callback: terminal.osc.Command{ .end_of_command = terminal.osc.Command__struct_155326{ .exit_code = 0 } }
   warning(stream): unimplemented OSC command: end_of_command

   debug(app): mailbox message=surface_message
   debug(surface): changing title "reinis@jupiter:/var/tmp/ghostty"
   debug(font_codepoint_resolver): searching for a fallback font for cp=35A
   info(font_codepoint_resolver): found codepoint 0x35A in fallback face=FreeMono
   @end

   Seems kitty protocol was enabled in atuin here:
   https://github.com/atuinsh/atuin/pull/1505/commits/a0e9cbae5420eb65a6a625342a9100b5d6c41f8e

   Found a workaround - disable ghostty shell integration (https://ghostty.org/docs/features/shell-integration):
   @code
   shell-integration = none
   @end
   Debug output for comparison:
   @code
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 18, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(io_handler): pushing kitty keyboard mode: terminal.kitty.key.Flags{ .disambiguate = true, .report_events = false, .report_alternates = true, .report_all = true, .report_associated = false }
   debug(app): mailbox message=surface_message
   debug(surface): changing mouse shape: terminal.mouse_shape.MouseShape.default

   # This escape code is different now that shell-integration is disabled
   # now:    27, 91, 49, 59, 49, 82
   # before: 27, 91, 54, 59, 49, 82
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 27, 91, 49, 59, 49, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, .len = 6 } }

   debug(gtk_x11): X11: found extra XkbStateNotify event w/lookup_mods: 0
   info(grid): reallocating GPU buffer old=27 new=543
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 27, 91, 50, 55, 117, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 5 } }
   debug(app): mailbox message=surface_message
   debug(surface): changing mouse shape: terminal.mouse_shape.MouseShape.text
   debug(io_handler): popping kitty keyboard mode n=1
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 108, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }
   debug(renderer_thread): mailbox message=renderer.message.Message{ .reset_cursor_blink = void }
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 115, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }
   debug(io_thread): mailbox message=termio.message.Message{ .write_small = termio.message.MessageData(u8,38).Small{ .data = { 13, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170 }, .len = 1 } }
   debug(app): mailbox message=surface_message
   debug(surface): changing title "reinis@jupiter:/var/tmp/ghostty"
   @end

   Something here triggers the bug:
   https://github.com/ghostty-org/ghostty/blob/f55c77bc817f0d28992e34db54408da388b172a6/src/shell-integration/bash/ghostty.bash#L101-L172
   This is how i tested changes to the shell-integration:
   @code
   zig build && cp src/shell-integration/bash/* zig-out/share/ghostty/shell-integration/bash/ && zig build run
   @end

   TODO: Check if atuin itself has some bash preexec commands.

** (neorg) Indentation jumps around

   ~ Create new heading
   ~ press enter, indentation is at correct level
   ~ press enter again -> no more indentation (may have to press enter multiple times to get the effect)

   After entering text and pressing escape, the text gets indented correctly.

   Maybe configure format_on_enter=false?
   https://github.com/nvim-neorg/neorg/wiki/Indent#format_on_enter
   I think the behavior will be more consistent if it formats only on exiting insert mode.

** Don't deploy python __pycache__ directories

   Either "git clean -fd" them or copy only specific files instead of directories.
   Encountered while developing workspace init scripts (dotfiles/i3/workspace-scripts).

** (skip) Migrate from transmission to rtorrent

   Used this as example on how to integrate with the flood ui:
   https://wiki.nixos.org/wiki/Rtorrent

   Registered a user in the flood ui.
   Specified socket /run/rtorrent/rpc.sock.

   Connected radarr to flood.
   https://github.com/jesec/flood/wiki/List-of-unofficial-API-integrations

   Radarr sends something to flood but it doesn't start downloading.
   Maybe because vpn not enabled?
   Have to solve the dns issues when vpn enabled.
   Update: Re-generated the wireguard config here https://mullvad.net/en/account/wireguard-config.
   Now dns seems to work.

   Maybe flood is not the way to go.
   Seems too complex and unmaintained.
   Will try to go with rutorrent https://github.com/Novik/ruTorrent.

   Managed to bring it up (port 9292).
   Left to do:
   - Connect kodi with rtorrent/rutorrent.
   - Resolve any filesystem permission issues between rtorrent and rutorrent.

   Update:
   Ran into some problems connecting kodi to rtorrent.
   The downloads also didn't start consistently.

   This was my config that barely worked:
   @code
   services.rtorrent = {
     enable = true;
     user = "reinis";
     group = "users";
     port = 51412;
     package = pkgs.jesec-rtorrent;
     openFirewall = true;
     downloadDir = "/media/Storage/rtorrent";
     configText = ''log.add_output = "debug", "log"'';
   };

   services.nginx = {
     enable = true;
     virtualHosts."myrutorrent" = {
       enableACME = false;
       addSSL = false;
       listen = [
         {
           addr = "0.0.0.0";
           port = 9292;
         }
       ];
     };
   };

   services.rutorrent = {
     enable = true;
     hostName = "myrutorrent";
     nginx.enable = true;
   };

   networking.firewall.allowedTCPPorts = [
     9292 # rutorrent UI
   ];
   networking.firewall.allowedUDPPorts = [
     6881 # rutorrent DHT
   ];
   @end

   Went back to transmission, seems to be working fine.
   Now i don't remember why i wanted to ditch transmission.

* Developer tooling

  Advice from matklad https://www.twitch.tv/videos/2336452629:
  - Work on your tools ("sharpen your axe")
  - Publish your tools
  - When using a tool, figure out how the authors *meant* it to be used, see if it works for you
  - For writing useful little scripts for yourself, the main enemy is *activation energy*

** (pre-commit) Exclude some python files from the ruff hooks

   I'm using https://github.com/cachix/git-hooks.nix to get pre-commit hooks.
   Here's the implementation of the ruff hook:
   https://github.com/cachix/git-hooks.nix/blob/80479b6ec16fefd9c1db3ea13aeb038c60530f46/modules/hooks.nix#L3666

   There's an official pre-commit plugin for ruff:
   https://github.com/astral-sh/ruff-pre-commit
   It uses the --force-exclude flag for ruff commands.
   @code
   --force-exclude
          Enforce exclusions, even for paths passed to Ruff directly on the command-line. Use `--no-force-exclude` to disable
   @end
   Looks like this is what i want.

   TODO: Try to create a custom hook or modify the one from git-hooks.nix - add the --force-exclude option.
   If it works as expected, create a PR in git-hooks.nix repo.

** (git) Try out mergiraf

   https://mergiraf.org/introduction.html
   https://codeberg.org/mergiraf/mergiraf

** (git) Try out difftastic

   https://difftastic.wilfred.me.uk/
   https://github.com/Wilfred/difftastic

** (neovim) One shortcut to navigate many kinds of lists

   There should be a way to select which list to navigate (errors, search results, uncommitted changes, conflicts, etc.)
   And two shortcuts to actually do the navigation.
   Idea taken from matklad: https://www.twitch.tv/videos/2336452629

** (neovim) Setup for Java development

   https://ptrtojoel.dev/posts/so-you-want-to-write-java-in-neovim/
   https://news.ycombinator.com/item?id=42530991

** (done) Add some pre-commit hooks

   https://github.com/cachix/git-hooks.nix

* Other

** Printing on NixOS

   I attempted it before, unsuccessfully, see attic/0001-wip-printing-no-luck-yet.patch

