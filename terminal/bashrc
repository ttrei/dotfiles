# .bashrc

# Don't do anyting for non-interactive sessions
case $- in
    *i*) ;;
      *) return;;
esac

# Guard the root user against accidents
if [ $UID -eq "0" ];then
    alias rm='rm -i'
    alias cp='cp -i'
    alias mv='mv -i'
fi

# Source global definitions
if [ -f /etc/bashrc ]; then
	source /etc/bashrc
fi

if [ -x "$(command -v kubectl)" ]; then
    source <(kubectl completion bash)
fi

eval "$(dircolors ~/.dircolors)"

alias_files=(
    common
    home
    work
    nixos
    debian
)
for a in "${alias_files[@]}"; do
	if [ -f $HOME/.bash_aliases/$a ]; then
		source $HOME/.bash_aliases/$a
	fi
done

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Color codes (see http://misc.flogisoft.com/bash/tip_colors_and_formatting)
# NB! We enclose the color codes with \[ and \] to specify that they are
# non-printing characters. Otherwise the terminal garbles long lines.
RCol='\[\e[0m\]'  # Reset
Bld='\[\e[1m\]'   # Bold
Red='\[\e[31m\]'  # Red
Gre='\[\e[32m\]'  # Green
Yel='\[\e[33m\]'  # Yellow
Blu='\[\e[34m\]'  # Light Blue
Inv='\[\e[7m\]'  # Invert
LGry='\[\e[97m\]' # Light Grey
Pur='\[\e[35m\]'  # Purple

# Root user is red, normal user is blue
if [ $UID -eq "0" ];then
    UCol="$Red"
else
    UCol="$Blu"
fi
# hostname color
HCol="$Blu"
# Terminal prompt

user_host="$Bld$UCol[\W]$RCol"

source $HOME/.git-prompt.sh # from http://code-worrier.com/blog/git-branch-in-bash-prompt/
git_branch='$(__git_ps1 " %s ")'
git_branch="$Bld$Pur$git_branch$RCol"

# https://unix.stackexchange.com/a/446149/260131
anyjobs() { [[ "$1" != 0 ]] && echo "[$1]"; }
jobs='$(anyjobs \j)'

prompt="$Bld$Blu\$$RCol"

PS1="$user_host$git_branch$jobs$prompt "

if [ -n "$START_CWD" ]; then
    cd "$START_CWD" || echo "Failed to cd to $START_CWD"
    unset START_CWD
fi

EDITOR=vim
export EDITOR

export PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'

if ! [ -x "$(command -v delta)" ]; then
    export GIT_PAGER=less
fi

# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# Jump-around script
if [ -f $HOME/.z.lua ] && [ -x "$(command -v lua)" ]; then
    eval "$(lua $HOME/.z.lua --init bash enhanced)"
    # Use the same datafile as z.sh
    export _ZL_DATA=$HOME/.z
elif [ -f $HOME/.z.sh ]; then
    echo "Cannot use z.lua because lua not available, falling back to z.sh"
    # Fallback to z.sh which is not as flexible, but better than nothing
    source $HOME/.z.sh
fi

# https://github.com/nix-community/nix-direnv/wiki/Shell-integration
nixify() {
  if [ ! -e ./.envrc ]; then
    echo "use nix" > .envrc
    direnv allow
  fi
  if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]]; then
    cat > default.nix <<'EOF'
with import <nixpkgs> {};
mkShell {
  nativeBuildInputs = [
    bashInteractive
  ];
}
EOF
    ${EDITOR:-vim} default.nix
  fi
}
flakify() {
  if [ ! -e flake.nix ]; then
    nix flake new -t github:nix-community/nix-direnv .
  elif [ ! -e .envrc ]; then
    echo "use flake" > .envrc
    direnv allow
  fi
  ${EDITOR:-vim} flake.nix
}

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi

if [ -f $HOME/.bash_fzf ]; then
    source $HOME/.bash_fzf
fi

if [ -f $HOME/.bash_nixos ]; then
    source $HOME/.bash_nixos
fi

# https://github.com/direnv/direnv/issues/106#issuecomment-1027330218
if [ -n "$TMUX" ] && [ -n "$DIRENV_DIR" ]; then
    unset "${!DIRENV_@}"  # unset env vars starting with DIRENV_
fi
if [ -x "$(command -v direnv)" ]; then
    eval "$(direnv hook bash)"
fi

if [ -x "$(command -v starship)" ]; then
    eval "$(starship init bash)"
fi
